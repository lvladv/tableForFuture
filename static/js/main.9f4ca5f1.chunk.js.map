{"version":3,"sources":["components/table.js","components/load/load.js","components/rowInfo.js","components/mode.js","components/search.js","components/addRow.js","App.js","serviceWorker.js","index.js"],"names":["Table","props","className","sort","onClick","onSort","data","map","item","key","phone","email","onRowInfo","id","firstName","lastName","Load","RowInfo","row","defaultValue","description","address","streetAddress","city","state","zip","Mode","onMode","Search","searchVal","createRef","ref","type","e","onSearch","current","value","preventDefault","AddRow","valID","valFirsName","valLastName","valEmail","valPhone","getOF","openForm","setState","getRB","addButtonRow","putRowToTab","event","onAddRow","this","onChange","placeholder","String","length","class","Component","App","url","modeData","fetchData","sortValue","SORT_DATA","concat","sortType","orderData","_","orderBy","page","search","getFilterData","result","filter","toLowerCase","includes","alert","handlePageClick","selected","push","load","buttonAdd","fetch","response","ok","json","status","filterData","newData","chunk","pageCount","Math","ceil","addReactPaginate","previousLabel","nextLabel","breakLabel","breakClassName","marginPagesDisplayed","pageRangeDisplayed","onPageChange","containerClassName","subContainerClassName","activeClassName","pageClassName","pageLinkClassName","previousClassName","nextClassName","previousLinkClassName","nextLinkClassName","forcePage","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9f4ca5f1.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst  Table =  props => {\r\n    return (\r\n    \r\n      <table className=\"table table-hover\">\r\n        <thead>\r\n          <tr>\r\n            <th>\r\n              id{\" \"}\r\n              <span className={(props.sort === \"asc\") ? \"up\" : \"down\"} onClick={()=> props.onSort(\"id\")}>\r\n                {\" \"}\r\n              </span>\r\n            </th>\r\n            <th>\r\n              firstName\r\n              <span className={(props.sort === \"asc\") ? \"up\" : \"down\"}onClick={()=> props.onSort(\"firstName\")}>\r\n                {\" \"}\r\n              </span>\r\n            </th>\r\n            <th>\r\n              lastName\r\n              <span className={(props.sort === \"asc\") ? \"up\" : \"down\"} onClick={()=> props.onSort(\"lastName\")}>\r\n                {\" \"}\r\n              </span>\r\n            </th>\r\n            <th>\r\n              email\r\n              <span className={(props.sort === \"asc\") ? \"up\" : \"down\"} onClick={()=> props.onSort(\"email\")}>\r\n                {\" \"}\r\n              </span>\r\n            </th>\r\n            <th>\r\n              phone\r\n              <span className={(props.sort === \"asc\") ? \"up\" : \"down\"} onClick={()=> props.onSort(\"phone\")}>\r\n                {\" \"}\r\n              </span>\r\n            </th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {props.data.map(item => (\r\n            <tr\r\n              key={item.phone+item.email}\r\n              onClick={(()=>props.onRowInfo(item))}\r\n            >\r\n              <td>{item.id}</td>\r\n              <td>{item.firstName}</td>\r\n              <td>{item.lastName}</td>\r\n              <td>{item.email}</td>\r\n              <td>{item.phone}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    );\r\n  }\r\n\r\n\r\nexport default Table;\r\n","import React from \"react\";\r\nimport \"./load.css\";\r\n\r\nconst Load = () => (\r\n  <div className=\"lds-grid\">\r\n    <div></div>\r\n    <div></div>\r\n    <div></div>\r\n    <div></div>\r\n    <div></div>\r\n    <div></div>\r\n    <div></div>\r\n    <div></div>\r\n    <div></div>\r\n  </div>\r\n);\r\n\r\nexport default Load;\r\n","import React from \"react\";\r\n\r\nconst RowInfo = ({ row }) => (\r\n  <section className = 'alert alert-primary'>\r\n    Выбран пользователь <b>{`${row.firstName} ${row.lastName}`}</b> <br />\r\n    Описание:\r\n    <br />\r\n    <textarea defaultValue={row.description} />\r\n    <br />\r\n    Адрес проживания: <b>{row.address.streetAddress}</b>\r\n    <br />\r\n    Город: <b>{row.address.city}</b>\r\n    <br />\r\n    Провинция/штат: <b>{row.address.state}</b>\r\n    <br />\r\n    Индекс: <b>{row.address.zip}</b>\r\n    <br />\r\n  </section>\r\n);\r\n\r\nexport default RowInfo;\r\n","import React from \"react\";\r\n\r\nconst Mode = props => {\r\n  const littleURL = `http://www.filltext.com/?rows=32&id={number|1000}&firstName={firstName}&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}`;\r\n\r\n  const bigURL = `http://www.filltext.com/?rows=1000&id={number|1000}&firstName={firstName}&delay=3&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}`;\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={() => props.onMode(littleURL)} className=\"btn btn-outline-success btn-lg mt-5\">\r\n        Маленький объем данных\r\n      </button>\r\n      <button onClick={() => props.onMode(bigURL)}  className=\"btn btn-outline-success btn-lg  ml-3 mt-5\">Большой объем данных</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Mode;\r\n","import React, { createRef } from \"react\";\r\n\r\nconst Search = props => {\r\n  let searchVal = createRef();\r\n  return (\r\n    <form className=\"my-3 form-inline\">\r\n      <div className=\"form-group\">\r\n        <input\r\n          ref={searchVal}\r\n          type=\"text\"\r\n          className=\"my-3 ml-3 form-control  \"\r\n        />\r\n        <button\r\n          className=\"ml-2 btn btn-secondary\"\r\n          onClick={(e) => {\r\n            props.onSearch(searchVal.current.value);\r\n            e.preventDefault();\r\n\r\n            searchVal.current.value = \"\";\r\n          }}\r\n        >\r\n          Искать\r\n        </button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import React, { createRef, Component } from \"react\";\r\n\r\nclass AddRow extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      addButtonRow: {\r\n        id: \"\",\r\n        firstName: \"\",\r\n        lastName: \"\",\r\n        email: \"\",\r\n        phone: \"\"\r\n      },\r\n      openForm: false\r\n    };\r\n  }\r\n\r\n  valID = createRef();\r\n  valFirsName = createRef();\r\n  valLastName = createRef();\r\n  valEmail = createRef();\r\n  valPhone = createRef();\r\n  getOF = () => {\r\n    const { openForm } = this.state;\r\n    this.setState(openForm ? { openForm: false } : { openForm: true });\r\n  };\r\n\r\n  getRB = () =>\r\n    this.setState({\r\n      addButtonRow: {\r\n        id: this.valID.current.value,\r\n        firstName: this.valFirsName.current.value,\r\n        lastName: this.valLastName.current.value,\r\n        email: this.valEmail.current.value,\r\n        phone: this.valPhone.current.value\r\n      }\r\n    });\r\n  putRowToTab = event => {\r\n    event.preventDefault();\r\n    const { addButtonRow } = this.state;\r\n    this.props.onAddRow(\r\n      addButtonRow.id,\r\n      addButtonRow.firstName,\r\n      addButtonRow.lastName,\r\n      addButtonRow.email,\r\n      addButtonRow.phone\r\n    );\r\n    this.valID.current.value =\"\";\r\n    this.valFirsName.current.value =\"\"\r\n    this.valLastName.current.value=\"\"\r\n    this.valEmail.current.value=\"\"\r\n    this.valPhone.current.value = \"\"\r\n  };\r\n  render() {\r\n    const { openForm, addButtonRow } = this.state;\r\n    if (!openForm) {\r\n      return <button className=\"btn btn-secondary ml-5 mb-5\" onClick={this.getOF}>Добавить</button>;\r\n    } else {\r\n      return (\r\n        <div className=\"col-sm-12 mx-auto\">\r\n          <button className=\"btn btn-info ml-3 \" onClick={this.getOF}>Добавить</button>\r\n          <form className=\"form-inline \" onChange={this.getRB}>\r\n            <input\r\n              ref={this.valID}\r\n              className=\"mx-3 my-3 col-2 form-control\"\r\n              type=\"text\"\r\n              placeholder=\"id\"\r\n            ></input>\r\n            <input\r\n              ref={this.valFirsName}\r\n              className=\"mx-3 my-3 col-2 form-control\"\r\n              type=\"text\"\r\n              placeholder=\"firstName\"\r\n            ></input>\r\n            <input\r\n              ref={this.valLastName}\r\n              className=\"mx-3 my-3 col-2 form-control\"\r\n              type=\"text\"\r\n              placeholder=\"lastName\"\r\n            ></input>\r\n            <input\r\n              ref={this.valEmail}\r\n              className=\"mx-3 my-3 col-2 form-control\"\r\n              type=\"text\"\r\n              placeholder=\"email\"\r\n            ></input>\r\n            <input\r\n              ref={this.valPhone}\r\n              className=\"mx-3 my-3 col-2 form-control\"\r\n              type=\"text\"\r\n              placeholder=\"phone\"\r\n            ></input>\r\n            {String(addButtonRow.id).length > 0 &&\r\n            String(addButtonRow.firstName).length > 0 &&\r\n            String(addButtonRow.lastName).length > 0 &&\r\n            String(addButtonRow.email).length > 0 &&\r\n            String(addButtonRow.phone).length > 0 ? (\r\n              <button  class=\"btn btn-secondary btn-sm  mx-auto col-8\" onClick={this.putRowToTab}>Добавить в таблицу</button>\r\n            ) : null}\r\n          </form>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default AddRow;\r\n","import React, { Component } from \"react\";\r\nimport Table from \"./components/table\";\r\nimport Load from \"./components/load/load\";\r\nimport RowInfo from \"./components/rowInfo\";\r\nimport Mode from \"./components/mode\";\r\nimport Search from \"./components/search\";\r\nimport AddRow from \"./components/addRow\";\r\nimport ReactPaginate from \"react-paginate\";\r\nimport _ from \"lodash\";\r\nconst rowSize = 50;\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      load: true,\r\n      data: [],\r\n      row: null,\r\n      modeData: false,\r\n      page: 0,\r\n      sort: \"asc\",\r\n      sortValue: \" \",\r\n      search: \"\",\r\n      addButtonRow: {\r\n        id: \"\",\r\n        firstName: \"\",\r\n        lastName: \"\",\r\n        email: \"\",\r\n        phone: \"\"\r\n      },\r\n      buttonAdd: false\r\n    };\r\n  }\r\n\r\n  \r\n\r\n  async fetchData(url) {\r\n    let response = await fetch(`${url}`);\r\n\r\n    if (response.ok) {\r\n      let data = await response.json();\r\n      this.setState({\r\n        load: false,\r\n        data\r\n      });\r\n    } else alert(`Ошибка HTTP.Статус: ${response.status}`);\r\n  }\r\n  // передача значения url  в fetch\r\n  onMode = url => {\r\n    this.setState({ modeData: true });\r\n    this.fetchData(url);\r\n  };\r\n\r\n  // сортировка\r\n\r\n  onSort = sortValue => {\r\n    const SORT_DATA = this.state.data.concat();\r\n    const sortType = this.state.sort === \"asc\" ? \"desc\" : \"asc\";\r\n    const orderData = _.orderBy(SORT_DATA, sortValue, sortType);\r\n    this.setState({\r\n      data: orderData,\r\n      sort: sortType,\r\n      sortValue\r\n    });\r\n  };\r\n\r\n  // поиск строки\r\n  onRowInfo = row => this.setState({ row });\r\n  //  поиск по названию\r\n\r\n  onSearch = searchVal => {\r\n    this.setState({\r\n      page: 0,\r\n      search: searchVal\r\n    });\r\n  };\r\n  getFilterData = () => {\r\n    const { data, search } = this.state;\r\n    if (!search) {\r\n      return data;\r\n    }\r\n    let result = data.filter(item => {\r\n      return (\r\n        item[\"firstName\"].toLowerCase().includes(search.toLowerCase()) ||\r\n        String(item[\"id\"])\r\n          .toLowerCase()\r\n          .includes(search.toLowerCase()) ||\r\n        item[\"lastName\"].toLowerCase().includes(search.toLowerCase()) ||\r\n        item[\"email\"].toLowerCase().includes(search.toLowerCase()) ||\r\n        String(item[\"phone\"])\r\n          .toLowerCase()\r\n          .includes(search.toLowerCase())\r\n      );\r\n    });\r\n\r\n    if (result.length === 0) {\r\n      alert(\"ничего такого нет\");\r\n      this.setState({ search: \"\" });\r\n      return data;\r\n    } else return result;\r\n  };\r\n\r\n  // обработка клтика паггинации\r\n  handlePageClick = ({ selected }) => {\r\n    this.setState({ page: selected });\r\n  };\r\n  // обработака кнопки добавить\r\n  componentDidMount() {\r\n    this.onAddRow();\r\n  }\r\n  onAddRow = (id, firstName, lastName, email, phone) => {\r\n    const { data } = this.state;\r\n    this.setState(() =>\r\n      data.push({\r\n        id,\r\n        firstName,\r\n        lastName,\r\n        email,\r\n        phone\r\n      })\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const { data, load, row, modeData, page, addButtonRow,sort } = this.state;\r\n    const filterData = this.getFilterData();\r\n\r\n    const newData = _.chunk(filterData, rowSize)[page];\r\n    const pageCount = Math.ceil(filterData.length / rowSize);\r\n    const addReactPaginate =\r\n      data.length > rowSize ? (\r\n        <ReactPaginate\r\n          previousLabel={\"previous\"}\r\n          nextLabel={\"next\"}\r\n          breakLabel={\"...\"}\r\n          breakClassName={\"break-me\"}\r\n          pageCount={pageCount}\r\n          marginPagesDisplayed={2}\r\n          pageRangeDisplayed={5}\r\n          onPageChange={this.handlePageClick}\r\n          containerClassName={\"pagination justify-content-end\"}\r\n          subContainerClassName={\"pages pagination\"}\r\n          activeClassName={\"btn-secondary active\"}\r\n          pageClassName=\"page-item\"\r\n          pageLinkClassName=\"page-link\"\r\n          previousClassName=\"page-item\"\r\n          nextClassName=\"page-item\"\r\n          previousLinkClassName=\"page-link\"\r\n          nextLinkClassName=\"page-link\"\r\n          forcePage={page}\r\n        />\r\n      ) : null;\r\n\r\n    if (!modeData) {\r\n      return (\r\n        <div className=\"container\">\r\n          <Mode onMode={this.onMode} />\r\n        </div>\r\n      );\r\n    } else\r\n      return (\r\n        <main>\r\n          <Search onSearch={this.onSearch} />\r\n          <AddRow onAddRow={this.onAddRow} addButtonRow={addButtonRow} />\r\n          {addReactPaginate}\r\n          {load ? (\r\n            <Load />\r\n          ) : (\r\n          \r\n            <Table\r\n              data={newData}\r\n              onRowInfo={this.onRowInfo}\r\n              onSort={this.onSort}\r\n              sort ={sort}\r\n            />\r\n          )}\r\n          {row ? <RowInfo row={row} /> : null}\r\n          {addReactPaginate}\r\n        </main>\r\n      );\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"./index.css\";\nimport 'bootstrap/dist/css/bootstrap.min.css'\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}